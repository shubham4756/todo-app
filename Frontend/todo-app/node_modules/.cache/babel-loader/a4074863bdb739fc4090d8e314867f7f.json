{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  // executeBasicAuthenticationService(username,password) {\n  //     return axios.get('http://localhost:8082/basicauth', {\n  //         headers: {\n  //             authorization: this.createBasicAuthToken(username,password)\n  //         }\n  //     })\n  // }\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8082/authenticate', {\n      username,\n      password\n    });\n  } // createBasicAuthToken(username,password) {\n  //     return  'Basic ' + window.btoa(username + \":\" + password) \n  // }\n\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    sessionStorage.setItem('token', this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem('authenticatedUser', username);\n    sessionStorage.setItem('token', this.createJwtToken(token));\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n    sessionStorage.removeItem('token');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["D:/Spring -Boot-React-Js/Frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeJwtAuthenticationService","username","password","post","registerSuccessfulLogin","sessionStorage","setItem","createBasicAuthToken","registerSuccessfulLoginForJwt","token","createJwtToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,+BAA+B,CAACC,QAAD,EAAUC,QAAV,EAAoB;AAC/C,WAAOJ,KAAK,CAACK,IAAN,CAAW,oCAAX,EAAiD;AACpDF,MAAAA,QADoD;AAEpDC,MAAAA;AAFoD,KAAjD,CAAP;AAIH,GAfuB,CAiBxB;AACA;AACA;;;AAEAE,EAAAA,uBAAuB,CAACH,QAAD,EAAUC,QAAV,EAAoB;AACvCG,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CL,QAA3C;AACAI,IAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAA+B,KAAKC,oBAAL,CAA0BN,QAA1B,EAAmCC,QAAnC,CAA/B;AACH;;AAEDM,EAAAA,6BAA6B,CAACP,QAAD,EAAUQ,KAAV,EAAiB;AAC1CJ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CL,QAA3C;AACAI,IAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAA+B,KAAKI,cAAL,CAAoBD,KAApB,CAA/B;AACH;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDE,EAAAA,MAAM,GAAG;AACLN,IAAAA,cAAc,CAACO,UAAf,CAA0B,mBAA1B;AACAP,IAAAA,cAAc,CAACO,UAAf,CAA0B,OAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAlDuB;;AAqD5B,eAAe,IAAIf,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\"\r\n\r\nclass AuthenticationService {\r\n\r\n    // executeBasicAuthenticationService(username,password) {\r\n    //     return axios.get('http://localhost:8082/basicauth', {\r\n    //         headers: {\r\n    //             authorization: this.createBasicAuthToken(username,password)\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    executeJwtAuthenticationService(username,password) {\r\n        return axios.post('http://localhost:8082/authenticate', {\r\n            username,\r\n            password\r\n        })\r\n    }\r\n\r\n    // createBasicAuthToken(username,password) {\r\n    //     return  'Basic ' + window.btoa(username + \":\" + password) \r\n    // }\r\n\r\n    registerSuccessfulLogin(username,password) {\r\n        sessionStorage.setItem('authenticatedUser',username)\r\n        sessionStorage.setItem('token',this.createBasicAuthToken(username,password))\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username,token) {\r\n        sessionStorage.setItem('authenticatedUser',username)\r\n        sessionStorage.setItem('token',this.createJwtToken(token))\r\n    }\r\n\r\n    createJwtToken(token) {\r\n        return 'Bearer ' + token;\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser')\r\n        sessionStorage.removeItem('token');\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null) return false;\r\n        return true;\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}