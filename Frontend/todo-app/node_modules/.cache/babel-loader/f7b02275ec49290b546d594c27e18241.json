{"ast":null,"code":"import _classCallCheck from \"D:/temp/frontend/todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/temp/frontend/todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\n\nvar AuthenticationService = /*#__PURE__*/function () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"executeBasicAuthenticationService\",\n    value: function executeBasicAuthenticationService(username, password) {\n      return axios.get('http://localhost:8080/basicauth', {\n        headers: {\n          authorization: this.createBasicAuthToken(username, password)\n        }\n      });\n    }\n  }, {\n    key: \"executeJwtAuthenticationService\",\n    value: function executeJwtAuthenticationService(username, password) {\n      return axios.post('http://localhost:8080/authenticate', {\n        username: username,\n        password: password\n      });\n    }\n  }, {\n    key: \"createBasicAuthToken\",\n    value: function createBasicAuthToken(username, password) {\n      return 'Basic ' + window.btoa(username + \":\" + password);\n    }\n  }, {\n    key: \"registerSuccessfulLogin\",\n    value: function registerSuccessfulLogin(username, password) {\n      sessionStorage.setItem('authenticatedUser', username);\n      this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n  }, {\n    key: \"registerSuccessfulLoginForJwt\",\n    value: function registerSuccessfulLoginForJwt(username, token) {\n      sessionStorage.setItem('authenticatedUser', username);\n      sessionStorage.setItem('token', this.createJWTToken(token)); // this.setupAxiosInterceptors()\n    }\n  }, {\n    key: \"createJWTToken\",\n    value: function createJWTToken(token) {\n      return 'Bearer ' + token;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      sessionStorage.removeItem('authenticatedUser');\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      var user = sessionStorage.getItem('authenticatedUser');\n      if (user === null) return false;\n      return true;\n    }\n  }, {\n    key: \"getLoggedInUserName\",\n    value: function getLoggedInUserName() {\n      var user = sessionStorage.getItem('authenticatedUser');\n      if (user === null) return '';\n      return user;\n    } // setupAxiosInterceptors(token) {\n    //     axios.interceptors.request.use(\n    //         (config) => {\n    //             if(this.isUserLoggedIn()) {\n    //                 config.headers.authorization = token\n    //             }\n    //             return config\n    //         }\n    //     )\n    // }\n\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["D:/temp/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","post","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","user","getItem"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,qB;;;;;;;WAEF,2CAAkCC,QAAlC,EAA4CC,QAA5C,EAAsD;AAClD,aAAOH,KAAK,CAACI,GAAN,CAAU,iCAAV,EACH;AAACC,QAAAA,OAAO,EAAE;AAACC,UAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC;AAAhB;AAAV,OADG,CAAP;AAEH;;;WAED,yCAAgCD,QAAhC,EAA0CC,QAA1C,EAAoD;AAChD,aAAOH,KAAK,CAACQ,IAAN,CAAW,oCAAX,EAAiD;AACpDN,QAAAA,QAAQ,EAARA,QADoD;AAEpDC,QAAAA,QAAQ,EAARA;AAFoD,OAAjD,CAAP;AAIH;;;WAED,8BAAqBD,QAArB,EAA8BC,QAA9B,EAAwC;AACpC,aAAO,WAAYM,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAnB;AACH;;;WAED,iCAAwBD,QAAxB,EAAiCC,QAAjC,EAA0C;AACtCQ,MAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CV,QAA5C;AACA,WAAKW,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC,CAA5B;AACH;;;WAED,uCAA8BD,QAA9B,EAAuCY,KAAvC,EAA8C;AAC1CH,MAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CV,QAA5C;AACAS,MAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAA+B,KAAKG,cAAL,CAAoBD,KAApB,CAA/B,EAF0C,CAG1C;AACH;;;WAED,wBAAeA,KAAf,EAAsB;AAClB,aAAO,YAAaA,KAApB;AACH;;;WAED,kBAAS;AACLH,MAAAA,cAAc,CAACK,UAAf,CAA0B,mBAA1B;AACH;;;WAED,0BAAiB;AACb,UAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,UAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,aAAO,IAAP;AACH;;;WAED,+BAAsB;AAClB,UAAIA,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,UAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,aAAOA,IAAP;AACH,K,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGJ,eAAe,IAAIhB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get('http://localhost:8080/basicauth', \n            {headers: {authorization: this.createBasicAuthToken(username,password)}})\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post('http://localhost:8080/authenticate', {\n            username,\n            password\n        })\n    }\n\n    createBasicAuthToken(username,password) {\n        return 'Basic ' +  window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username,password){\n        sessionStorage.setItem('authenticatedUser', username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username,password))\n    }\n\n    registerSuccessfulLoginForJwt(username,token) {\n        sessionStorage.setItem('authenticatedUser', username)\n        sessionStorage.setItem('token',this.createJWTToken(token))\n        // this.setupAxiosInterceptors()\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' +  token\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user===null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user===null) return ''\n        return user\n    }\n\n    // setupAxiosInterceptors(token) {\n    //     axios.interceptors.request.use(\n    //         (config) => {\n    //             if(this.isUserLoggedIn()) {\n    //                 config.headers.authorization = token\n    //             }\n    //             return config\n    //         }\n    //     )\n    // }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}