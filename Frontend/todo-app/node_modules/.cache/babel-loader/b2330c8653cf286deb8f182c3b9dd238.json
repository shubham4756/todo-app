{"ast":null,"code":"import _classCallCheck from \"D:/temp/frontend/todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/temp/frontend/todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { API_URL } from '../../Constants.js';\nexport var USER_SESSION = 'authenticatedUser';\nexport var TOKEN_SESSION = 'token';\n\nvar AuthenticationService = /*#__PURE__*/function () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"executeJwtAuthenticationService\",\n    value: function executeJwtAuthenticationService(username, password) {\n      return axios.post(\"\".concat(API_URL, \"/authenticate\"), {\n        username: username,\n        password: password\n      });\n    }\n  }, {\n    key: \"registerSuccessfulLoginForJwt\",\n    value: function registerSuccessfulLoginForJwt(username, token) {\n      sessionStorage.setItem(USER_SESSION, username);\n      sessionStorage.setItem(TOKEN_SESSION, this.createJWTToken(token));\n    }\n  }, {\n    key: \"createJWTToken\",\n    value: function createJWTToken(token) {\n      return 'Bearer ' + token;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      sessionStorage.removeItem(USER_SESSION);\n      sessionStorage.removeItem(TOKEN_SESSION);\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      var user = sessionStorage.getItem(USER_SESSION);\n      if (user === null) return false;\n      return true;\n    }\n  }, {\n    key: \"getLoggedInUserName\",\n    value: function getLoggedInUserName() {\n      var user = sessionStorage.getItem(USER_SESSION);\n      if (user === null) return '';\n      return user;\n    }\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["D:/temp/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","API_URL","USER_SESSION","TOKEN_SESSION","AuthenticationService","username","password","post","token","sessionStorage","setItem","createJWTToken","removeItem","user","getItem"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,OAAO,IAAMC,YAAY,GAAG,mBAArB;AACP,OAAO,IAAMC,aAAa,GAAG,OAAtB;;IAEDC,qB;;;;;;;WAEF,yCAAgCC,QAAhC,EAA0CC,QAA1C,EAAoD;AAChD,aAAON,KAAK,CAACO,IAAN,WAAcN,OAAd,oBAAsC;AACzCI,QAAAA,QAAQ,EAARA,QADyC;AAEzCC,QAAAA,QAAQ,EAARA;AAFyC,OAAtC,CAAP;AAIH;;;WAED,uCAA8BD,QAA9B,EAAuCG,KAAvC,EAA8C;AAC1CC,MAAAA,cAAc,CAACC,OAAf,CAAuBR,YAAvB,EAAqCG,QAArC;AACAI,MAAAA,cAAc,CAACC,OAAf,CAAuBP,aAAvB,EAAqC,KAAKQ,cAAL,CAAoBH,KAApB,CAArC;AACH;;;WAED,wBAAeA,KAAf,EAAsB;AAClB,aAAO,YAAaA,KAApB;AACH;;;WAED,kBAAS;AACLC,MAAAA,cAAc,CAACG,UAAf,CAA0BV,YAA1B;AACAO,MAAAA,cAAc,CAACG,UAAf,CAA0BT,aAA1B;AACH;;;WAED,0BAAiB;AACb,UAAIU,IAAI,GAAGJ,cAAc,CAACK,OAAf,CAAuBZ,YAAvB,CAAX;AACA,UAAGW,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,aAAO,IAAP;AACH;;;WAED,+BAAsB;AAClB,UAAIA,IAAI,GAAGJ,cAAc,CAACK,OAAf,CAAuBZ,YAAvB,CAAX;AACA,UAAGW,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,aAAOA,IAAP;AACH;;;;;;AAGL,eAAe,IAAIT,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport { API_URL } from '../../Constants.js'\n\nexport const USER_SESSION = 'authenticatedUser'\nexport const TOKEN_SESSION = 'token' \n\nclass AuthenticationService {\n    \n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username,token) {\n        sessionStorage.setItem(USER_SESSION, username)\n        sessionStorage.setItem(TOKEN_SESSION,this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' +  token\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_SESSION)\n        sessionStorage.removeItem(TOKEN_SESSION)\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_SESSION)\n        if(user===null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_SESSION)\n        if(user===null) return ''\n        return user\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}