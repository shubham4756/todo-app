{"ast":null,"code":"import axios from \"axios\";\n\nclass TodoDataService {\n  retriveAllTodos(user) {\n    let u = JSON.parse(sessionStorage.getItem('token'));\n    const token = u.data.id;\n    console.log(token);\n    return axios.get(`http://localhost:8082/users/${user}/todos`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  retriveTodo(user, id) {\n    let u = JSON.parse(sessionStorage.getItem('token'));\n    const token = u.data.id;\n    console.log(token);\n    return axios.get(`http://localhost:8082/users/${user}/todos/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  deleteTodo(user, id) {\n    let u = JSON.parse(sessionStorage.getItem('token'));\n    const token = u.data.id;\n    console.log(token);\n    return axios.delete(`http://localhost:8082/users/${user}/todos/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  updateTodo(user, id, todo) {\n    let u = JSON.parse(sessionStorage.getItem('token'));\n    const token = u.data.id;\n    console.log(token);\n    return axios.put(`http://localhost:8082/users/${user}/todos/${id}`, todo, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  createTodo(user, todo) {\n    let u = JSON.parse(sessionStorage.getItem('token'));\n    const token = u.da;\n    console.log(token);\n    return axios.post(`http://localhost:8082/users/${user}/todos/`, todo, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n}\n\nexport default new TodoDataService();","map":{"version":3,"sources":["D:/Spring -Boot-React-Js/Frontend/todo-app/src/api/todo/TodoDataService.js"],"names":["axios","TodoDataService","retriveAllTodos","user","u","JSON","parse","sessionStorage","getItem","token","data","id","console","log","get","headers","Authorization","retriveTodo","deleteTodo","delete","updateTodo","todo","put","createTodo","da","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,eAAe,CAACC,IAAD,EAAO;AAClB,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAX,CAAR;AACA,UAAMC,KAAK,GAAGL,CAAC,CAACM,IAAF,CAAOC,EAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,WAAOT,KAAK,CAACc,GAAN,CAAW,+BAA8BX,IAAK,QAA9C,EACP;AACIY,MAAAA,OAAO,EAAG;AACNC,QAAAA,aAAa,EAAG,UAASP,KAAM;AADzB;AADd,KADO,CAAP;AAMH;;AAEDQ,EAAAA,WAAW,CAACd,IAAD,EAAMQ,EAAN,EAAU;AACjB,QAAIP,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAX,CAAR;AACA,UAAMC,KAAK,GAAGL,CAAC,CAACM,IAAF,CAAOC,EAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,WAAOT,KAAK,CAACc,GAAN,CAAW,+BAA8BX,IAAK,UAASQ,EAAG,EAA1D,EACP;AACII,MAAAA,OAAO,EAAG;AACNC,QAAAA,aAAa,EAAG,UAASP,KAAM;AADzB;AADd,KADO,CAAP;AAOH;;AAEDS,EAAAA,UAAU,CAACf,IAAD,EAAMQ,EAAN,EAAU;AAChB,QAAIP,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAX,CAAR;AACA,UAAMC,KAAK,GAAGL,CAAC,CAACM,IAAF,CAAOC,EAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,WAAOT,KAAK,CAACmB,MAAN,CAAc,+BAA8BhB,IAAK,UAASQ,EAAG,EAA7D,EACP;AACII,MAAAA,OAAO,EAAG;AACNC,QAAAA,aAAa,EAAG,UAASP,KAAM;AADzB;AADd,KADO,CAAP;AAMH;;AAEDW,EAAAA,UAAU,CAACjB,IAAD,EAAMQ,EAAN,EAASU,IAAT,EAAe;AACrB,QAAIjB,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAX,CAAR;AACA,UAAMC,KAAK,GAAGL,CAAC,CAACM,IAAF,CAAOC,EAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,WAAOT,KAAK,CAACsB,GAAN,CAAW,+BAA8BnB,IAAK,UAASQ,EAAG,EAA1D,EAA4DU,IAA5D,EACP;AACIN,MAAAA,OAAO,EAAG;AACNC,QAAAA,aAAa,EAAG,UAASP,KAAM;AADzB;AADd,KADO,CAAP;AAMH;;AAEDc,EAAAA,UAAU,CAACpB,IAAD,EAAMkB,IAAN,EAAY;AAClB,QAAIjB,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAX,CAAR;AACA,UAAMC,KAAK,GAAGL,CAAC,CAACoB,EAAhB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,WAAOT,KAAK,CAACyB,IAAN,CAAY,+BAA8BtB,IAAK,SAA/C,EAAwDkB,IAAxD,EACP;AACIN,MAAAA,OAAO,EAAG;AACNC,QAAAA,aAAa,EAAG,UAASP,KAAM;AADzB;AADd,KADO,CAAP;AAMH;;AA5DiB;;AA+DtB,eAAe,IAAIR,eAAJ,EAAf","sourcesContent":["import axios from \"axios\"\r\n\r\nclass TodoDataService {\r\n    retriveAllTodos(user) {\r\n        let u = JSON.parse(sessionStorage.getItem('token'));\r\n        const token = u.data.id;\r\n        console.log(token)\r\n        return axios.get(`http://localhost:8082/users/${user}/todos`,\r\n        {\r\n            headers : {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n    }\r\n\r\n    retriveTodo(user,id) {\r\n        let u = JSON.parse(sessionStorage.getItem('token'));\r\n        const token = u.data.id;\r\n        console.log(token)\r\n        return axios.get(`http://localhost:8082/users/${user}/todos/${id}`,\r\n        {\r\n            headers : {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        }\r\n        )\r\n    }\r\n\r\n    deleteTodo(user,id) {\r\n        let u = JSON.parse(sessionStorage.getItem('token'));\r\n        const token = u.data.id;\r\n        console.log(token)\r\n        return axios.delete(`http://localhost:8082/users/${user}/todos/${id}`,\r\n        {\r\n            headers : {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n    }\r\n\r\n    updateTodo(user,id,todo) {\r\n        let u = JSON.parse(sessionStorage.getItem('token'));\r\n        const token = u.data.id;\r\n        console.log(token)\r\n        return axios.put(`http://localhost:8082/users/${user}/todos/${id}`,todo,\r\n        {\r\n            headers : {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n    }\r\n\r\n    createTodo(user,todo) {\r\n        let u = JSON.parse(sessionStorage.getItem('token'));\r\n        const token = u.da;\r\n        console.log(token)\r\n        return axios.post(`http://localhost:8082/users/${user}/todos/`,todo,\r\n        {\r\n            headers : {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default new TodoDataService()"]},"metadata":{},"sourceType":"module"}