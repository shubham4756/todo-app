{"ast":null,"code":"import axios from 'axios';\naxios.interceptors.request.use(async config => {\n  console.log(\" in side authorization\");\n  axios.defaults.headers.Authorization = 'Basic c2h1YmhhbToxMjM0';\n  return config;\n}, error => {\n  console.log(error);\n});\n\nclass AuthenticationService {\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username); // this.setupAxiosInterceptors()\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  } // setupAxiosInterceptors() {\n  //     // let username = \"shubham\"\n  //     // let password = \"1234\"\n  // }\n\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["D:/Spring -Boot-React-Js/Frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","interceptors","request","use","config","console","log","defaults","headers","Authorization","error","AuthenticationService","registerSuccessfulLogin","username","password","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,MAAOC,MAAP,IAAkB;AACdC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAN,EAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,aAAvB,GAAuC,wBAAvC;AACA,SAAOL,MAAP;AACH,CALL,EAMKM,KAAD,IAAW;AACPL,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH,CARL;;AAWA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,uBAAuB,CAACC,QAAD,EAAUC,QAAV,EAAoB;AACvCC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CH,QAA3C,EADuC,CAEvC;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACLF,IAAAA,cAAc,CAACG,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH,GApBuB,CAsBxB;AACA;AACA;AAEA;;;AA1BwB;;AA6B5B,eAAe,IAAIT,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\naxios.interceptors.request.use(\r\n    async (config) => {\r\n        console.log(\" in side authorization\")\r\n        axios.defaults.headers.Authorization = 'Basic c2h1YmhhbToxMjM0'\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.log(error);\r\n    }\r\n)\r\n\r\nclass AuthenticationService {\r\n    registerSuccessfulLogin(username,password) {\r\n        sessionStorage.setItem('authenticatedUser',username)\r\n        // this.setupAxiosInterceptors()\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser')\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null) return false;\r\n        return true;\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    // setupAxiosInterceptors() {\r\n    //     // let username = \"shubham\"\r\n    //     // let password = \"1234\"\r\n        \r\n    // }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}