{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors();\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = \"shubham\";\n    let password = \"1234\";\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    console.log(\"in Axios Interceptors\");\n    instance.interceptors.request.use(function (config) {\n      console.log(\" in  authorization !! \");\n      config.headers['Authorization'] = basicAuthHeader;\n      return config;\n    }); // axios.interceptors.request.use(\n    //     async (config) => {\n    //         // if(this.isUserLoggedIn()) {\n    //             console.log(\" in side authorization\")\n    //             config.headers.Authorization = basicAuthHeader\n    //         // }\n    //         return config;\n    //     },\n    //     (error) => {\n    //         console.log(error);\n    //     }\n    // )\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["D:/Spring -Boot-React-Js/Frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfulLogin","username","password","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","basicAuthHeader","window","btoa","console","log","instance","interceptors","request","use","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,uBAAuB,CAACC,QAAD,EAAUC,QAAV,EAAoB;AACvCC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CH,QAA3C;AACA,SAAKI,sBAAL;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDJ,EAAAA,sBAAsB,GAAG;AACrB,QAAIJ,QAAQ,GAAG,SAAf;AACA,QAAIC,QAAQ,GAAG,MAAf;AACA,QAAIU,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYb,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAC,IAAAA,QAAQ,CAACC,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAUC,MAAV,EAAkB;AAChDN,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAK,MAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkCV,eAAlC;AACA,aAAOS,MAAP;AACH,KAJD,EALqB,CAWrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AA7CuB;;AAgD5B,eAAe,IAAItB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nclass AuthenticationService {\r\n    registerSuccessfulLogin(username,password) {\r\n        sessionStorage.setItem('authenticatedUser',username)\r\n        this.setupAxiosInterceptors()\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser')\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null) return false;\r\n        return true;\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors() {\r\n        let username = \"shubham\"\r\n        let password = \"1234\"\r\n        let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password) \r\n        console.log(\"in Axios Interceptors\")\r\n        instance.interceptors.request.use(function (config) {\r\n            console.log(\" in  authorization !! \")\r\n            config.headers['Authorization'] = basicAuthHeader;\r\n            return config;\r\n        });\r\n\r\n        // axios.interceptors.request.use(\r\n        //     async (config) => {\r\n        //         // if(this.isUserLoggedIn()) {\r\n        //             console.log(\" in side authorization\")\r\n        //             config.headers.Authorization = basicAuthHeader\r\n        //         // }\r\n        //         return config;\r\n        //     },\r\n        //     (error) => {\r\n        //         console.log(error);\r\n        //     }\r\n        // )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}